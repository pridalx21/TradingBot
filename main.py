import streamlit as st
import ccxt
import pandas as pd
import numpy as np
import plotly.graph_objs as go
from datetime import datetime
import yfinance as yf
import requests
from datetime import datetime, timedelta
from newsapi import NewsApiClient
from textblob import TextBlob
import os
from dotenv import load_dotenv
import altair as alt
from trading_bot import MultiAssetTradingBot

# Funktion zum Abrufen von Marktdaten
def fetch_market_data(symbol='BTC/USDT', timeframe='1h', limit=100):
    exchange = ccxt.binance({
        'rateLimit': 1200,
        'enableRateLimit': True,
        'timeout': 60000,  # Timeout auf 60 Sekunden erh√∂hen
    })
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    
    # Debugging: Log the fetched market data
    st.write("Marktdaten:", df.head())
    
    return df

# Bitpanda API-Integration
load_dotenv()
api_key = os.getenv("BITPANDA_API_KEY")

if api_key:
    st.success("API-Schl√ºssel erfolgreich geladen.")
else:
    st.error("Kein g√ºltiger API-Schl√ºssel verf√ºgbar.")

# Titel und Beschreibung
st.title("Krypto Marktanalyse und Daytrading Tipps")
st.write("""
Diese Anwendung bietet Echtzeit-Marktdaten, technische Indikatoren und Handelssignale f√ºr verschiedene Kryptow√§hrungen.
""")

# Seitenleiste f√ºr Benutzereingaben
st.sidebar.header("Einstellungen")

# Automatische Auswahl und gleichzeitiges Trading mit mehreren Handelspaaren
symbols = ["BTC/USDT", "ETH/USDT", "BNB/USDT", "ADA/USDT", "XRP/USDT"]
selected_symbols = []
performances = {}

for symbol in symbols:
    data = fetch_market_data(symbol, timeframe="1h", limit=100)
    performance = data['close'].pct_change().sum()
    performances[symbol] = performance

# W√§hle die Top 3 Handelspaare basierend auf der Performance
selected_symbols = sorted(performances, key=performances.get, reverse=True)[:3]

st.write(f"Automatisch ausgew√§hlte Handelspaare: {', '.join(selected_symbols)}")

# Auswahl des Zeitrahmens
timeframe = st.sidebar.selectbox(
    "W√§hle den Zeitrahmen",
    ("1m", "5m", "15m", "1h", "4h", "1d")
)

# Anzahl der Datenpunkte
limit = st.sidebar.number_input("Anzahl der Datenpunkte", min_value=50, max_value=1000, value=100)

# Men√º f√ºr Bitpanda-Daten√ºbersicht hinzuf√ºgen
if st.sidebar.button("Bitpanda Daten√ºbersicht"):
    if api_key:
        # Beispielaufruf der Bitpanda API
        headers = {
            'X-API-KEY': api_key,
            'Accept': 'application/json',
        }
        response = requests.get("https://api.bitpanda.com/v1/wallets", headers=headers)
        if response.status_code == 200:
            wallets = response.json()
            
            # Entferne Debugging-Ausgabe
            # st.write("### Debugging: Bitpanda API Response")
            # st.json(response.json())

            # Bitpanda Wallets √úbersicht
            st.write("### Bitpanda Wallets √úbersicht")
            for wallet in wallets['data']:
                attributes = wallet['attributes']
                st.write(f"**{attributes.get('name', 'Unknown')}**: {attributes.get('balance', '0')} {attributes.get('cryptocoin_symbol', 'Unknown')}")
        else:
            st.error("Fehler beim Abrufen der Bitpanda-Daten.")
    else:
        st.error("API-Schl√ºssel nicht gefunden. Bitte √ºberpr√ºfen Sie Ihre .env-Datei.")

# BTC Wallet Balance abrufen
btc_wallet_balance = 0  # Hier den tats√§chlichen Kontostand abrufen

# Beispiel: Abrufen des BTC Wallet Balance von Bitpanda
try:
    response = requests.get('https://api.bitpanda.com/v1/wallets', headers={'X-Api-Key': api_key})
    if response.status_code == 200:
        wallets = response.json().get('data', [])
        for wallet in wallets:
            attributes = wallet.get('attributes', {})
            if attributes.get('currency') == 'BTC':
                btc_wallet_balance = float(attributes.get('balance', 0))
                break
    else:
        st.error("Fehler beim Abrufen des BTC Wallet Balance")
except Exception as e:
    st.error(f"Fehler: {str(e)}")

account_size = btc_wallet_balance

# Risikoprozentsatz definieren
risk_percentage = 5

# Trading Bot Integration
st.sidebar.markdown("---")
st.sidebar.header("ü§ñ Trading Bot")

# Bot Konfiguration
bot_enabled = st.sidebar.checkbox("Trading Bot aktivieren", value=False)
if bot_enabled:
    bot_timeframe = st.sidebar.selectbox(
        "Trading Intervall",
        ("1m", "5m", "15m", "1h"),
        index=0
    )
    
    # Asset-Auswahl
    st.sidebar.subheader("Asset-Klassen")
    trade_crypto = st.sidebar.checkbox("Kryptow√§hrungen", value=True)
    trade_stocks = st.sidebar.checkbox("Aktien", value=False)
    trade_etfs = st.sidebar.checkbox("ETFs", value=False)
    trade_metals = st.sidebar.checkbox("Edelmetalle", value=False)
    
    # Leverage-Einstellungen
    st.sidebar.subheader("Hebel-Einstellungen")
    leverage_crypto = st.sidebar.number_input("Krypto Hebel", min_value=1, max_value=5, value=3)
    leverage_stocks = st.sidebar.number_input("Aktien Hebel", min_value=1, max_value=3, value=2)
    leverage_etfs = st.sidebar.number_input("ETF Hebel", min_value=1, max_value=2, value=1)
    leverage_metals = st.sidebar.number_input("Metall Hebel", min_value=1, max_value=4, value=2)
    
    # Stop-Loss/Take-Profit
    st.sidebar.subheader("Risk Management")
    stop_loss = st.sidebar.number_input("Stop-Loss (%)", min_value=0.5, max_value=5.0, value=1.0, step=0.1)
    take_profit = st.sidebar.number_input("Take-Profit (%)", min_value=1.0, max_value=10.0, value=2.0, step=0.1)

# Trading Bot Status und Performance
if bot_enabled:
    st.markdown("## ü§ñ Trading Bot Status")
    
    # Erstelle Spalten f√ºr das Layout
    col1, col2, col3 = st.columns(3)
    
    # Bot-Status
    with col1:
        st.metric(
            "Bot Status",
            "Aktiv ‚úÖ",
            "Trading l√§uft"
        )
    
    # Gesamtperformance
    with col2:
        st.metric(
            "Trades Heute",
            "0",
            "Warte auf Signale..."
        )
    
    with col3:
        st.metric(
            "Gewinn/Verlust",
            "‚Ç¨0.00",
            "0%"
        )
    
    # Performance pro Asset-Klasse
    st.markdown("### üìä Performance nach Asset-Klasse")
    
    # Erstelle Tabs f√ºr verschiedene Asset-Klassen
    asset_tabs = st.tabs(["Krypto", "Aktien", "ETFs", "Metalle"])
    
    for tab, (asset_type, enabled) in zip(
        asset_tabs,
        [
            ("crypto", trade_crypto),
            ("stocks", trade_stocks),
            ("etfs", trade_etfs),
            ("metals", trade_metals)
        ]
    ):
        with tab:
            if enabled:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric(
                        "Offene Positionen",
                        "0",
                        "Keine aktiven Trades"
                    )
                    
                    st.metric(
                        "Trades Heute",
                        "0",
                        "Warte auf Signale..."
                    )
                
                with col2:
                    st.metric(
                        "Gewinn/Verlust",
                        "‚Ç¨0.00",
                        "0%"
                    )
                    
                    st.metric(
                        "Bester Trade",
                        "‚Ç¨0.00",
                        "0%"
                    )
            else:
                st.info(f"{asset_type.upper()} Trading deaktiviert")
    
    # Live Trading Feed
    st.markdown("### üìà Live Trading Feed")
    
    # Erstelle einen leeren Container f√ºr Updates
    trading_feed = st.empty()
    
    # Platzhalter f√ºr Trading Feed
    with trading_feed.container():
        st.info("Trading Bot initialisiert. Warte auf Handelssignale...")
    
    # Performance Charts
    st.markdown("### üìä Performance √úbersicht")
    
    # Initialisiere Beispieldaten f√ºr Charts
    now = pd.Timestamp.now()
    date_range = pd.date_range(start=now - pd.Timedelta(days=30), end=now, freq='H')
    
    # Generiere validierte Testdaten
    np.random.seed(42)  # F√ºr reproduzierbare Ergebnisse
    profits = np.random.randn(len(date_range)).cumsum()
    
    chart_data = pd.DataFrame({
        'timestamp': date_range,
        'profit': profits,
    })
    
    # Stelle sicher, dass keine unendlichen oder NaN-Werte vorhanden sind
    chart_data = chart_data.replace([np.inf, -np.inf], np.nan).dropna()
    
    # Konvertiere Timestamp zu Datetime und stelle sicher, dass es g√ºltige Werte sind
    chart_data['timestamp'] = pd.to_datetime(chart_data['timestamp'])
    chart_data = chart_data[chart_data['timestamp'].notna()]
    
    # Sortiere nach Timestamp
    chart_data = chart_data.sort_values('timestamp')
    
    def create_performance_chart(data, height=300):
        if data.empty:
            return alt.Chart().mark_text().encode(
                text=alt.value('Keine Daten verf√ºgbar')
            )

        # Berechne y-Achsen Grenzen mit Puffer
        y_min = data['profit'].min()
        y_max = data['profit'].max()
        y_padding = (y_max - y_min) * 0.1 if y_min != y_max else 1.0  # Verhindere Division durch Null
        
        # Berechne x-Achsen Grenzen
        x_min = data['timestamp'].min()
        x_max = data['timestamp'].max()
        
        if pd.isna(x_min) or pd.isna(x_max):
            return alt.Chart().mark_text().encode(
                text=alt.value('Ung√ºltige Zeitstempel in den Daten')
            )
        
        base = alt.Chart(data).encode(
            x=alt.X('timestamp:T', 
                   title='Zeit',
                   axis=alt.Axis(labelAngle=-45),
                   scale=alt.Scale(domain=[x_min, x_max], nice=True)
            )
        ).properties(height=height)

        line = base.mark_line(color='#00ff00').encode(
            y=alt.Y('profit:Q',
                   title='Gewinn/Verlust (EUR)',
                   scale=alt.Scale(
                       domain=[y_min - y_padding, y_max + y_padding],
                       nice=True
                   ),
                   axis=alt.Axis(format='.2f')
            ),
            tooltip=[
                alt.Tooltip('timestamp:T', title='Zeit', format='%Y-%m-%d %H:%M'),
                alt.Tooltip('profit:Q', title='Gewinn/Verlust', format='.2f')
            ]
        )

        return line

    # Erstelle Tabs f√ºr verschiedene Zeitr√§ume
    time_tabs = st.tabs(["24h", "7d", "30d"])
    
    with time_tabs[0]:  # 24h
        cutoff_24h = now - pd.Timedelta(hours=24)
        last_24h = chart_data[chart_data['timestamp'] >= cutoff_24h].copy()
        if not last_24h.empty:
            st.altair_chart(
                create_performance_chart(last_24h),
                use_container_width=True
            )
        else:
            st.warning("Keine Daten f√ºr die letzten 24 Stunden verf√ºgbar")
    
    with time_tabs[1]:  # 7d
        cutoff_7d = now - pd.Timedelta(days=7)
        last_7d = chart_data[chart_data['timestamp'] >= cutoff_7d].copy()
        if not last_7d.empty:
            st.altair_chart(
                create_performance_chart(last_7d),
                use_container_width=True
            )
        else:
            st.warning("Keine Daten f√ºr die letzten 7 Tage verf√ºgbar")
    
    with time_tabs[2]:  # 30d
        if not chart_data.empty:
            st.altair_chart(
                create_performance_chart(chart_data),
                use_container_width=True
            )
        else:
            st.warning("Keine Daten f√ºr die letzten 30 Tage verf√ºgbar")
    
    # Risk Management √úbersicht
    st.markdown("### ‚ö†Ô∏è Risk Management")
    
    risk_col1, risk_col2 = st.columns(2)
    
    with risk_col1:
        # Aktive Positionen
        st.markdown("#### Aktive Positionen")
        positions_df = pd.DataFrame({
            'Asset': ['BTC/EUR', 'ETH/EUR', 'XRP/EUR'],
            'Typ': ['Long', 'Short', 'Long'],
            'Einstieg': ['‚Ç¨41,000', '‚Ç¨2,200', '‚Ç¨0.55'],
            'Stop-Loss': ['‚Ç¨40,590', '‚Ç¨2,222', '‚Ç¨0.54'],
            'Take-Profit': ['‚Ç¨41,820', '‚Ç¨2,156', '‚Ç¨0.56']
        })
        st.dataframe(
            positions_df.style.apply(lambda x: ['background-color: #1e2130'] * len(x)),
            hide_index=True,
            use_container_width=True
        )
    
    with risk_col2:
        # Risk Exposure
        st.markdown("#### Risk Exposure")
        exposure_df = pd.DataFrame({
            'Asset-Klasse': ['Krypto', 'Aktien', 'ETFs', 'Metalle'],
            'Risk %': [2.5, 1.2, 0.8, 0.5]
        })
        
        # Erstelle Balkendiagramm f√ºr Risk Exposure
        risk_chart = alt.Chart(exposure_df).mark_bar().encode(
            x=alt.X('Asset-Klasse:N', title='Asset-Klasse'),
            y=alt.Y('Risk %:Q', 
                    title='Risiko (%)', 
                    scale=alt.Scale(domain=[0, 5])),
            color=alt.Color(
                'Asset-Klasse:N',
                legend=None,
                scale=alt.Scale(
                    domain=['Krypto', 'Aktien', 'ETFs', 'Metalle'],
                    range=['#00ff00', '#ff9900', '#00ccff', '#ff3366']
                )
            ),
            tooltip=[
                alt.Tooltip('Asset-Klasse:N', title='Asset'),
                alt.Tooltip('Risk %:Q', title='Risiko', format='.1f')
            ]
        ).properties(height=200)
        
        st.altair_chart(risk_chart, use_container_width=True)

# Starte den Trading Bot
if bot_enabled:
    # Konfiguriere Asset-Parameter
    asset_params = {
        'crypto': {
            'leverage': leverage_crypto,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'enabled': trade_crypto
        },
        'stocks': {
            'leverage': leverage_stocks,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'enabled': trade_stocks
        },
        'etfs': {
            'leverage': leverage_etfs,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'enabled': trade_etfs
        },
        'metals': {
            'leverage': leverage_metals,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'enabled': trade_metals
        }
    }
    
    # Starte den Bot direkt im Streamlit-Kontext
    try:
        with st.spinner('Trading Bot wird gestartet...'):
            bot = MultiAssetTradingBot(
                timeframe=bot_timeframe,
                risk_percentage=risk_percentage
            )
            bot.asset_params = asset_params
            
            # Erstelle einen Container f√ºr Bot-Updates
            update_container = st.empty()
            
            def update_status(message):
                with update_container:
                    st.write(message)
            
            # Starte Trading mit Status-Updates
            bot.start_trading(status_callback=update_status)
            st.success("Trading Bot l√§uft!")
            
    except Exception as e:
        st.error(f"Bot Error: {str(e)}")

# Funktion zum Berechnen des gleitenden Durchschnitts
def moving_average(data, window):
    if 'close' not in data.columns:
        st.error("Fehler: 'close'-Spalte fehlt in den Daten")
        return None
    return data['close'].rolling(window=window).mean()

# Funktion zur Generierung von Handelssignalen
def generate_signal(data):
    if 'close' not in data.columns:
        st.error("Fehler: 'close'-Spalte fehlt in den Daten")
        return None
    data['MA_20'] = moving_average(data, 20)
    data['MA_50'] = moving_average(data, 50)
    signal = []
    for i in range(len(data)):
        if data['MA_20'][i] > data['MA_50'][i]:
            signal.append('Kaufen')
        elif data['MA_20'][i] < data['MA_50'][i]:
            signal.append('Verkaufen')
        else:
            signal.append('Halten')
    data['Signal'] = signal
    
    # Debugging: Log the generated signals
    st.write("Generierte Signale:", data[['timestamp', 'Signal']].tail())
    st.write("MA_20:", data['MA_20'].tail())
    st.write("MA_50:", data['MA_50'].tail())
    
    return data

# Bollinger Bands Berechnung
def calculate_bollinger_bands(data, window=20, num_std=2):
    if 'close' not in data.columns:
        st.error("Fehler: 'close'-Spalte fehlt in den Daten")
        return None
    rolling_mean = data['close'].rolling(window=window).mean()
    rolling_std = data['close'].rolling(window=window).std()
    upper_band = rolling_mean + (rolling_std * num_std)
    lower_band = rolling_mean - (rolling_std * num_std)
    return upper_band, rolling_mean, lower_band

# MACD Berechnung
def calculate_macd(data, fast=12, slow=26, signal=9):
    if 'close' not in data.columns:
        st.error("Fehler: 'close'-Spalte fehlt in den Daten")
        return None
    exp1 = data['close'].ewm(span=fast, adjust=False).mean()
    exp2 = data['close'].ewm(span=slow, adjust=False).mean()
    macd = exp1 - exp2
    signal_line = macd.ewm(span=signal, adjust=False).mean()
    return macd, signal_line

# Volatilit√§tsberechnung
def calculate_volatility(data, window=14):
    if 'close' not in data.columns:
        st.error("Fehler: 'close'-Spalte fehlt in den Daten")
        return None
    return data['close'].pct_change().rolling(window=window).std() * np.sqrt(window)

# Relative Strength Index (RSI)
def calculate_rsi(prices, window=14):
    # Berechne RSI direkt aus der Preisserie
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Trendst√§rke berechnen
def calculate_trend_strength(data, window=14):
    if 'close' not in data.columns:
        st.error("Fehler: 'close'-Spalte fehlt in den Daten")
        return None
    price_changes = data['close'].diff()
    positive_moves = price_changes.where(price_changes > 0, 0).rolling(window=window).mean()
    negative_moves = abs(price_changes.where(price_changes < 0, 0)).rolling(window=window).mean()
    trend_strength = (positive_moves / (positive_moves + negative_moves) * 100)
    return trend_strength

# Support und Resistance Levels finden
def find_support_resistance(data, window=20):
    if 'high' not in data.columns or 'low' not in data.columns:
        st.error("Fehler: 'high' oder 'low'-Spalte fehlt in den Daten")
        return None
    highs = data['high'].rolling(window=window, center=True).max()
    lows = data['low'].rolling(window=window, center=True).min()
    return lows.iloc[-1], highs.iloc[-1]

# Risikokalkulator
def calculate_position_size(account_size, risk_percentage, entry_price, stop_loss):
    risk_amount = account_size * (risk_percentage / 100)
    price_difference = abs(entry_price - stop_loss)
    position_size = risk_amount / price_difference
    return position_size

# Marktanalyse und Empfehlungen
def generate_market_analysis(data):
    if 'close' not in data.columns:
        st.error("Fehler: 'close'-Spalte fehlt in den Daten")
        return None
    current_price = data['close'].iloc[-1]
    prev_price = data['close'].iloc[-2]
    price_change = ((current_price - prev_price) / prev_price) * 100

    volatility = calculate_volatility(data).iloc[-1] * 100
    rsi_value = data['RSI'].iloc[-1]

    analysis = []

    if rsi_value > 70:
        analysis.append("‚ö†Ô∏è **√úberkauft**: Der RSI ist hoch ({}), was auf eine m√∂gliche Korrektur hinweisen k√∂nnte.".format(round(rsi_value, 2)))
    elif rsi_value < 30:
        analysis.append("üí° **√úberverkauft**: Der RSI ist niedrig ({}), was auf eine m√∂gliche Erholung hinweisen k√∂nnte.".format(round(rsi_value, 2)))

    if volatility > 5:
        analysis.append("üìä **Hohe Volatilit√§t**: {}% - Vorsicht bei Trades, enge Stop-Loss setzen.".format(round(volatility, 2)))
    else:
        analysis.append("üìä **Moderate Volatilit√§t**: {}% - Normalere Marktbedingungen.".format(round(volatility, 2)))

    if abs(price_change) > 5:
        analysis.append("üîÑ **Starke Preisbewegung**: {:.2f}% in der letzten Periode".format(price_change))

    return analysis

# Weltmarkt-Daten abrufen
def fetch_global_market_data():
    # Wichtige Markt-Indikatoren
    tickers = {
        'S&P 500': '^GSPC',
        'Gold': 'GC=F',
        'US Dollar Index': 'DX-Y.NYB',
        'Volatilit√§tsindex': '^VIX',
        'US 10Y Treasury': '^TNX'
    }
    
    market_data = {}
    for name, ticker in tickers.items():
        try:
            data = yf.Ticker(ticker).history(period='1d')
            if not data.empty:
                current_price = data['Close'].iloc[-1]
                daily_change = ((current_price - data['Open'].iloc[-1]) / data['Open'].iloc[-1]) * 100
                market_data[name] = {
                    'price': current_price,
                    'change': daily_change
                }
        except Exception as e:
            market_data[name] = {'price': None, 'change': None}
    
    return market_data

# Fear & Greed Index abrufen
def fetch_fear_greed_index():
    try:
        url = "https://api.alternative.me/fng/"
        response = requests.get(url)
        data = response.json()
        return {
            'value': data['data'][0]['value'],
            'classification': data['data'][0]['value_classification']
        }
    except:
        return {'value': '?', 'classification': 'Keine Daten verf√ºgbar'}

# Nachrichtenabruf und Analyse
def fetch_crypto_news():
    try:
        newsapi = NewsApiClient(api_key='eba5f86a4e16496fbaf275549bfb9d33')  # Hier API-Key einf√ºgen
        
        # Krypto-bezogene Nachrichten
        crypto_news = newsapi.get_everything(
            q='(bitcoin OR cryptocurrency OR crypto) AND (market OR price OR regulation)',
            language='de',
            sort_by='publishedAt',
            page_size=5
        )
        
        # Wirtschaftsnachrichten
        economic_news = newsapi.get_everything(
            q='(inflation OR "federal reserve" OR "central bank" OR recession)',
            language='de',
            sort_by='publishedAt',
            page_size=5
        )
        
        return {
            'crypto': crypto_news.get('articles', []),
            'economic': economic_news.get('articles', [])
        }
    except:
        return {'crypto': [], 'economic': []}

# Sentiment-Analyse f√ºr Nachrichten
def analyze_news_sentiment(text):
    try:
        analysis = TextBlob(text)
        # Normalisiere Sentiment auf Skala von -100 bis 100
        sentiment = analysis.sentiment.polarity * 100
        
        if sentiment > 30:
            return "Positiv", sentiment
        elif sentiment < -30:
            return "Negativ", sentiment
        else:
            return "Neutral", sentiment
    except:
        return "Neutral", 0

# Nachrichteneinfluss analysieren
def analyze_market_impact(news_item):
    title = news_item.get('title', '') or ''
    description = news_item.get('description', '') or ''
    
    # Wichtige Marktkatalysatoren
    keywords = {
        'sehr negativ': ['verbot', 'crash', 'hack', 'betrug', 'konkurs'],
        'negativ': ['regulierung', 'warnung', 'risiko', 'inflation'],
        'positiv': ['adoption', 'integration', 'partnerschaft', 'innovation'],
        'sehr positiv': ['durchbruch', 'genehmigung', 'mainstream', 'institutional']
    }
    
    combined_text = (title + ' ' + description).lower()
    impact = 0
    
    for sentiment, words in keywords.items():
        for word in words:
            if word in combined_text:
                if sentiment == 'sehr negativ':
                    impact -= 2
                elif sentiment == 'negativ':
                    impact -= 1
                elif sentiment == 'positiv':
                    impact += 1
                else:  # sehr positiv
                    impact += 2
    
    return impact

# Daten abrufen und analysieren
with st.spinner('Daten werden abgerufen und analysiert...'):
    for symbol in selected_symbols:
        data = fetch_market_data(symbol, timeframe, limit)
        
        # Sicherstellen, dass die 'close'-Spalte vorhanden ist
        if 'close' not in data.columns:
            st.error(f"Fehler: 'close'-Spalte fehlt in den Daten f√ºr {symbol}")
            continue
        
        data = generate_signal(data)
        data['RSI'] = calculate_rsi(data['close'])

        last_signal = data['Signal'].iloc[-1]
        st.write(f"**Aktuelles Signal f√ºr {symbol} im Zeitrahmen {timeframe}:** {last_signal}")

        if last_signal == 'Kaufen':
            st.success(f"Signal f√ºr {symbol}: **Kaufen** - Der 20-Tage-Durchschnitt liegt √ºber dem 50-Tage-Durchschnitt.")
        elif last_signal == 'Verkaufen':
            st.warning(f"Signal f√ºr {symbol}: **Verkaufen** - Der 20-Tage-Durchschnitt liegt unter dem 50-Tage-Durchschnitt.")
        else:
            st.info(f"Signal f√ºr {symbol}: **Halten** - Keine klare Richtung.")

        entry_price = data['close'].iloc[-1]
        stop_loss = entry_price * 0.95
        position_size = calculate_position_size(account_size, risk_percentage, entry_price, stop_loss)
        st.success(f"Empfohlene Positionsgr√∂√üe f√ºr {symbol}: {position_size:.4f} {symbol.split('/')[0]}")

# Anf√§nger-freundliche Funktionen
st.header("üéì Anf√§nger-Bereich")

# Trendst√§rke Anzeige
for symbol in selected_symbols:
    data = fetch_market_data(symbol, timeframe, limit)
    
    # Sicherstellen, dass die 'close'-Spalte vorhanden ist
    if 'close' not in data.columns:
        st.error(f"Fehler: 'close'-Spalte fehlt in den Daten f√ºr {symbol}")
        continue
    
    trend_strength = calculate_trend_strength(data)
    st.subheader(f"üìä Trendst√§rke f√ºr {symbol}")
    trend_strength_value = trend_strength.iloc[-1]
    st.write(f"Aktuelle Trendst√§rke: {trend_strength_value:.1f}%")

    if trend_strength_value > 70:
        st.success("Starker Trend - gute Bedingungen f√ºr Trendfolge-Strategien")
    elif trend_strength_value < 30:
        st.warning("Schwacher Trend - besser auf klare Signale warten")
    else:
        st.info("Moderater Trend - normale Marktbedingungen")

# Support und Resistance
for symbol in selected_symbols:
    data = fetch_market_data(symbol, timeframe, limit)
    
    # Sicherstellen, dass die 'high' und 'low'-Spalten vorhanden sind
    if 'high' not in data.columns or 'low' not in data.columns:
        st.error(f"Fehler: 'high' oder 'low'-Spalte fehlt in den Daten f√ºr {symbol}")
        continue
    
    support, resistance = find_support_resistance(data)
    st.subheader(f"üéØ Support & Resistance Levels f√ºr {symbol}")
    st.write(f"N√§chster Support-Level: {support:.2f}")
    st.write(f"N√§chster Resistance-Level: {resistance:.2f}")

# Risikokalkulator
for symbol in selected_symbols:
    st.subheader(f"üí∞ Risikokalkulator f√ºr {symbol}")
    col1, col2 = st.columns(2)
    with col1:
        account_size = st.number_input("Kontostand (USDT)", min_value=100.0, value=1000.0, step=100.0, key=f'account_size_input_{symbol}')
        risk_percentage = st.number_input("Risiko pro Trade (%)", min_value=0.1, max_value=5.0, value=1.0, step=0.1, key=f'risk_percentage_{symbol}')
    with col2:
        entry_price = st.number_input("Einstiegspreis", min_value=0.1, value=float(data['close'].iloc[-1]), step=0.1, key=f'entry_price_{symbol}')
        stop_loss = st.number_input("Stop-Loss Preis", min_value=0.1, value=float(data['close'].iloc[-1])*0.95, step=0.1, key=f'stop_loss_{symbol}')

    position_size = calculate_position_size(account_size, risk_percentage, entry_price, stop_loss)
    st.success(f"Empfohlene Positionsgr√∂√üe: {position_size:.4f} {symbol.split('/')[0]}")

# Grundlagen-Erkl√§rungen
st.subheader("üìö Grundlagen f√ºr Anf√§nger")
st.markdown("""
### üîë Wichtige Konzepte:

1. **Trendfolge**
   - Ein Trend ist dein Freund - handle in Richtung des √ºbergeordneten Trends
   - Kaufe in Aufw√§rtstrends bei R√ºcksetzern
   - Verkaufe in Abw√§rtstrends bei Erholungen

2. **Support & Resistance**
   - Support: Preisbereich, wo K√§ufer aktiv werden
   - Resistance: Preisbereich, wo Verk√§ufer aktiv werden
   - Diese Levels sind wichtige Entscheidungspunkte

3. **Risikomanagement**
   - Nutze immer einen Stop-Loss
   - Riskiere nie mehr als 1-2% deines Kapitals pro Trade
   - Plane deine Trades im Voraus

4. **Grundlegende Indikatoren**
   - RSI: Zeigt √ºberkaufte/√ºberverkaufte Bereiche
   - Moving Averages: Zeigen Trends und m√∂gliche Unterst√ºtzung
   - Volumen: Best√§tigt Preisbewegungen

### ‚ö†Ô∏è H√§ufige Anf√§ngerfehler vermeiden:
- Nicht ohne Stop-Loss handeln
- Nicht einem Verlust hinterherlaufen
- Nicht zu gro√üe Positionen eingehen
- Nicht gegen den Trend handeln
- Nicht zu oft handeln - Qualit√§t √ºber Quantit√§t
""")

# Marktphasen-Erkl√§rung
st.subheader("üåä Aktuelle Marktphase")
for symbol in selected_symbols:
    data = fetch_market_data(symbol, timeframe, limit)
    
    # Sicherstellen, dass die 'close'-Spalte vorhanden ist
    if 'close' not in data.columns:
        st.error(f"Fehler: 'close'-Spalte fehlt in den Daten f√ºr {symbol}")
        continue
    
    # Berechne RSI
    data['RSI'] = calculate_rsi(data['close'])
    rsi = data['RSI'].iloc[-1]
    
    # Berechne Volatilit√§t
    volatility = calculate_volatility(data).iloc[-1] * 100
    
    # Berechne Trendst√§rke
    trend_strength_value = calculate_trend_strength(data).iloc[-1]
    
    def determine_market_phase():
        if trend_strength_value > 60:
            if rsi > 60:
                return "Starker Aufw√§rtstrend", "Trendfolge-Strategien bevorzugen, auf R√ºcksetzer achten"
            else:
                return "Beginnender Aufw√§rtstrend", "Auf Ausbr√ºche nach oben achten"
        elif trend_strength_value < 40:
            if rsi < 40:
                return "Starker Abw√§rtstrend", "Vorsichtig sein, keine voreiligen K√§ufe"
            else:
                return "Beginnender Abw√§rtstrend", "Gewinne absichern, Stop-Loss eng setzen"
        else:
            return "Seitw√§rtsphase", "Auf Range-Trading setzen, Unterst√ºtzung und Widerst√§nde beachten"

    phase, recommendation = determine_market_phase()
    st.write(f"**Aktuelle Phase f√ºr {symbol}:** {phase}")
    st.write(f"**Empfehlung:** {recommendation}")

# Weltmarkt-Analyse
st.header("üåç Globale Markt√ºbersicht")

# Weltmarkt-Daten anzeigen
st.subheader("üìä Wichtige Marktindikatoren")
market_data = fetch_global_market_data()

# Erstelle drei Spalten f√ºr die Marktdaten
col1, col2, col3 = st.columns(3)

# Funktion f√ºr farbige Darstellung der √Ñnderungen
def format_change(change):
    if change is None:
        return "Keine Daten"
    color = "green" if change >= 0 else "red"
    return f"<span style='color: {color}'>{change:+.2f}%</span>"

# Verteile die Marktdaten auf die Spalten
indicators = list(market_data.items())
for i, (name, data) in enumerate(indicators):
    with [col1, col2, col3][i % 3]:
        st.markdown(f"**{name}**")
        if data['price'] is not None:
            st.markdown(f"Preis: {data['price']:.2f}")
            st.markdown(f"√Ñnderung: {format_change(data['change'])}", unsafe_allow_html=True)
        else:
            st.markdown("Keine Daten verf√ºgbar")

# Fear & Greed Index
st.subheader("üò® Fear & Greed Index")
fear_greed = fetch_fear_greed_index()
col1, col2 = st.columns(2)

with col1:
    st.metric("Fear & Greed Wert", fear_greed['value'])
with col2:
    st.write(f"Status: **{fear_greed['classification']}**")
    
    # Interpretationen basierend auf dem Index
    if int(fear_greed['value']) < 25:
        st.warning("Extreme Angst - Historisch oft eine gute Kaufgelegenheit")
    elif int(fear_greed['value']) > 75:
        st.warning("Extreme Gier - Vorsicht geboten, m√∂gliche Korrektur")
    else:
        st.info("Neutraler Markt - Normale Handelsbedingungen")

# Marktkorrelationen und Einfl√ºsse
st.subheader("üîÑ Marktkorrelationen")
st.markdown("""
### Aktuelle Markteinfl√ºsse:

1. **Aktienmarkt (S&P 500)**
   - Positive Korrelation mit Krypto in Risiko-On Phasen
   - Wichtiger Indikator f√ºr globales Risikosentiment
   
2. **US Dollar Index**
   - Negative Korrelation mit Krypto
   - Starker Dollar = Schw√§chere Kryptow√§hrungen
   
3. **Gold**
   - Traditioneller "sicherer Hafen"
   - Korrelation mit Bitcoin in Krisenzeiten
   
4. **Volatilit√§tsindex (VIX)**
   - "Angstbarometer" des Marktes
   - Hoher VIX = Erh√∂hte Markt√§ngste
   
5. **Anleihenrenditen**
   - Einfluss auf Kapitalfl√ºsse
   - H√∂here Renditen k√∂nnen Krypto-Investments weniger attraktiv machen
""")

# Handelsempfehlungen basierend auf Makrodaten
st.subheader("üìà Makro√∂konomische Handelsempfehlungen")

def generate_macro_recommendations(market_data, fear_greed_value):
    recommendations = []
    
    # Analyse des Marktumfelds
    try:
        vix = market_data['Volatilit√§tsindex']['price']
        if vix > 30:
            recommendations.append("‚ö†Ô∏è Hohe Marktvolatilit√§t - Reduzierte Positionsgr√∂√üen empfohlen")
        elif vix < 15:
            recommendations.append("‚úÖ Niedrige Volatilit√§t - Normale Positionsgr√∂√üen m√∂glich")
            
        # Dollar-Analyse
        if market_data['US Dollar Index']['change'] > 0.5:
            recommendations.append("üìâ Starker Dollar - Vorsicht bei Krypto-Longpositionen")
        elif market_data['US Dollar Index']['change'] < -0.5:
            recommendations.append("üìà Schwacher Dollar - Positiv f√ºr Kryptow√§hrungen")
            
        # Gesamtmarkt-Sentiment
        if int(fear_greed_value) < 20:
            recommendations.append("üí° Extremes Angst-Level - Antizyklische Kaufgelegenheiten beobachten")
        elif int(fear_greed_value) > 80:
            recommendations.append("‚ö†Ô∏è Extreme Gier - Gewinne absichern, vorsichtiger agieren")
            
    except:
        recommendations.append("‚ö†Ô∏è Einige Marktdaten nicht verf√ºgbar - Vorsichtig handeln")
    
    return recommendations

macro_recommendations = generate_macro_recommendations(market_data, fear_greed['value'])
for rec in macro_recommendations:
    st.markdown(rec)

# Nachrichtenanalyse und Medieneinfl√ºsse
st.header("üì∞ Marktrelevanzte Nachrichten & Medienanalyse")

# Nachrichten abrufen
news_data = fetch_crypto_news()

# Krypto-Nachrichten
st.subheader("üîó Aktuelle Krypto-Nachrichten")
if news_data['crypto']:
    for article in news_data['crypto']:
        with st.expander(article.get('title', 'Keine √úberschrift')):
            description = article.get('description', 'Keine Beschreibung verf√ºgbar')
            sentiment, score = analyze_news_sentiment(description)
            impact = analyze_market_impact(article)
            
            st.write(description)
            st.write(f"Quelle: **{article.get('source', {}).get('name', 'Unbekannt')}** | Datum: {article.get('publishedAt', '')[:10]}")
            
            # Sentiment und Markteinfluss anzeigen
            col1, col2 = st.columns(2)
            with col1:
                sentiment_color = "green" if score > 0 else "red" if score < 0 else "gray"
                st.markdown(f"Sentiment: <span style='color: {sentiment_color}'>{sentiment} ({score:.1f}%)</span>", 
                          unsafe_allow_html=True)
            with col2:
                impact_text = "‚¨ÜÔ∏è Positiv" if impact > 0 else "‚¨áÔ∏è Negativ" if impact < 0 else "‚û°Ô∏è Neutral"
                st.write(f"M√∂glicher Markteinfluss: {impact_text}")
            
            if article.get('url'):
                st.markdown(f"[Vollst√§ndiger Artikel]({article['url']})")
else:
    st.info("Keine aktuellen Krypto-Nachrichten verf√ºgbar")

# Wirtschaftsnachrichten
st.subheader("üìä Wichtige Wirtschaftsnachrichten")
if news_data['economic']:
    for article in news_data['economic']:
        with st.expander(article.get('title', 'Keine √úberschrift')):
            description = article.get('description', 'Keine Beschreibung verf√ºgbar')
            sentiment, score = analyze_news_sentiment(description)
            st.write(description)
            st.write(f"Quelle: **{article.get('source', {}).get('name', 'Unbekannt')}** | Datum: {article.get('publishedAt', '')[:10]}")
            
            sentiment_color = "green" if score > 0 else "red" if score < 0 else "gray"
            st.markdown(f"Sentiment: <span style='color: {sentiment_color}'>{sentiment} ({score:.1f}%)</span>",
                      unsafe_allow_html=True)
            
            if article.get('url'):
                st.markdown(f"[Vollst√§ndiger Artikel]({article['url']})")
else:
    st.info("Keine aktuellen Wirtschaftsnachrichten verf√ºgbar")

# Gesamtanalyse des Nachrichtensentiments
st.subheader("üìà Mediensentiment-Analyse")
st.markdown("""
### üéØ Interpretation der Nachrichten:

1. **Krypto-spezifische Faktoren**
   - Regulatorische Entwicklungen
   - Technologische Fortschritte
   - Institutionelle Adoption
   - Sicherheitsvorf√§lle

2. **Makro√∂konomische Einfl√ºsse**
   - Zinspolitik der Zentralbanken
   - Inflationsentwicklung
   - Geopolitische Ereignisse
   - Wirtschaftswachstum

3. **Marktsentiment**
   - Medienwahrnehmung
   - Soziale Medien Trends
   - Institutionelles Interesse
   - Retail-Interesse
""")

# Hinweise zur Nachrichteninterpretation
st.info("""
**üí° Tipps zur Nachrichtenanalyse:**
- Fokussiere auf verifizierte Nachrichtenquellen
- Beachte den zeitlichen Kontext der Nachrichten
- Unterscheide zwischen kurzfristigen und langfristigen Auswirkungen
- Ber√ºcksichtige mehrere Perspektiven
- Sei vorsichtig bei extremen Schlagzeilen
""")

# Footer
st.markdown("---")
st.markdown(" 2025 Krypto Marktanalyse App")